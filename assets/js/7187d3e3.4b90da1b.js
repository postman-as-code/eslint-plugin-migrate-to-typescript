"use strict";(self.webpackChunk_website=self.webpackChunk_website||[]).push([[7936],{876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(2784);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),a=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=a(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=a(r),y=i,d=m["".concat(p,".").concat(y)]||m[y]||c[y]||o;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var a=2;a<o;a++)s[a]=r[a];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8820:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>y,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var n=r(7896),i=r(1461),o=(r(2784),r(876)),s=["components"],l={id:"esm-consistent-type-import",title:"esm-consistent-type-import",tags:["ESM"]},p=void 0,a={unversionedId:"plugins/migrate-to-typescript/rules/esm-consistent-type-import",id:"plugins/migrate-to-typescript/rules/esm-consistent-type-import",title:"esm-consistent-type-import",description:"Rule Details",source:"@site/docs/plugins/migrate-to-typescript/rules/esm-consistent-type-import.md",sourceDirName:"plugins/migrate-to-typescript/rules",slug:"/plugins/migrate-to-typescript/rules/esm-consistent-type-import",permalink:"/eslint-plugins/docs/plugins/migrate-to-typescript/rules/esm-consistent-type-import",draft:!1,tags:[{label:"ESM",permalink:"/eslint-plugins/docs/tags/esm"}],version:"current",frontMatter:{id:"esm-consistent-type-import",title:"esm-consistent-type-import",tags:["ESM"]},sidebar:"migrate2typescriptSidebar",previous:{title:"no-require",permalink:"/eslint-plugins/docs/plugins/migrate-to-typescript/rules/no-require"},next:{title:"Configs Table \ud83d\udcac",permalink:"/eslint-plugins/docs/plugins/migrate-to-typescript/configs/"}},u={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"When to use it",id:"when-to-use-it",level:3},{value:"When <em>not</em> to use it",id:"when-not-to-use-it",level:3},{value:"Credit \ud83d\ude4f",id:"credit-",level:4}],m={toc:c};function y(e){var t=e.components,r=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"Enforces consistent usage of type imports, by splitting type-imports from value-imports."),(0,o.kt)("p",null,"TypeScript 3.8 added support for type-only imports. Type-only imports allow you to specify that an import can only be used in a type location, allowing certain optimizations within compilers."),(0,o.kt)("p",null,"Rule is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\ud83d\udd27 fixable")),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"correct")," code for this rule \u2705"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// correct \u2705\nimport { myValueProperty } from "my-module";\nimport type { IMyInterfaceProperty } from "my-module";\n')),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"incorrect")," code for this rule \u26d4\ufe0f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// incorrect \u26d4\ufe0f\nimport { myValueProperty, IMyInterfaceProperty } from "my-module";\n')),(0,o.kt)("h3",{id:"when-to-use-it"},"When to use it"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Whenever possible, this approach does no harm and letting both developers and building tools (e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"babel"),") to understand intuitively,\nhow an import module's property should be used or be built, for instance, ",(0,o.kt)("inlineCode",{parentName:"li"},"types")," of any kind should be avoid on any build's output.")),(0,o.kt)("h3",{id:"when-not-to-use-it"},"When ",(0,o.kt)("em",{parentName:"h3"},"not")," to use it"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you are not using TypeScript 3.8 (or greater), then you will not be able to use this rule, as type-only imports are not allowed."),(0,o.kt)("li",{parentName:"ul"},"If you specifically want to use both import kinds for stylistic reasons, you can disable this rule.")),(0,o.kt)("h4",{id:"credit-"},"Credit \ud83d\ude4f"),(0,o.kt)("sup",null,(0,o.kt)("p",null,"Inspired by ","\xa0",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.md"},"from typescript-eslint")," \ud83d\udc9c")))}y.isMDXComponent=!0}}]);