{
    "parser": "@typescript-eslint/parser",
    "env": {
        "node": true,
        "jest": true
    },
    "parserOptions": {
        "ecmaVersion": 11,
        "sourceType": "module",
        "project": "./tsconfig.eslint.json"
    },
    "root": true,
    "settings": {},
    "extends": [],
    "plugins": [
        "@typescript-eslint",
        "import",
        "unicorn"
    ],
    "rules": {
        // typescript-eslint-rules - Supported Rules
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
            "error",
            {
                "default": "array"
            }
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": [
            "error",
            {
                "minimumDescriptionLength": 10,
                "ts-expect-error": "allow-with-description",
                "ts-check": "allow-with-description",
                "ts-ignore": true,
                "ts-nocheck": true
            }
        ],
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {},
                "extendDefaults": true
            }
        ],
        "@typescript-eslint/class-literal-property-style": [
            "error",
            "getters"
        ],
        "@typescript-eslint/consistent-indexed-object-style": [
            "error",
            "index-signature"
        ],
        "@typescript-eslint/consistent-type-assertions": [
            "error",
            {
                "assertionStyle": "as",
                "objectLiteralTypeAssertions": "never"
            }
        ],
        "@typescript-eslint/consistent-type-definitions": [
            "off"
        ],
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": [
            "error",
            {
                "prefer": "type-imports"
            }
        ],
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                "accessibility": "explicit"
            }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/member-delimiter-style": "error",
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/method-signature-style": [
            "error",
            "method"
        ],
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "format": [
                    "camelCase",
                    "UPPER_CASE"
                ],
                "selector": [
                    "variable"
                ]
            },
            // for consts that behave like exported enums/constants
            {
                "format": [
                    "UPPER_CASE",
                    "StrictPascalCase"
                ],
                "selector": [
                    "variable"
                ],
                "modifiers": [
                    // const & exported
                    "const",
                    "exported"
                ],
                "prefix": [
                    // Const Enum
                    "CE",
                    "C"
                ]
            },
            {
                "format": [
                    "camelCase"
                ],
                "selector": [
                    "function",
                    "parameter",
                    "classProperty"
                ]
            },
            {
                "format": [
                    "strictCamelCase",
                    // for cases where generating object as enum workaround
                    "PascalCase"
                ],
                // allow snake-case with chars: "- or @ or /" e.g. "a-@b-/c"
                // used for the eslint rules, which using the convention as standard
                "filter": {
                    "match": false,
                    "regex": "^[\\w\\-@\\/]*$"
                },
                "selector": [
                    "objectLiteralProperty"
                ]
            },
            {
                "format": [
                    "PascalCase"
                ],
                "selector": [
                    "interface"
                ],
                "prefix": [
                    "I"
                ]
            },
            {
                "format": [
                    "PascalCase"
                ],
                "selector": [
                    "typeAlias"
                ],
                "prefix": [
                    "T"
                ]
            },
            {
                "format": [
                    "PascalCase"
                ],
                "selector": [
                    "enum"
                ],
                "prefix": [
                    "E"
                ]
            }
        ],
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": [
            "error",
            {
                "ignoreArrowShorthand": true,
                "ignoreVoidOperator": false
            }
        ],
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-empty-interface": "off",
        // related to common usages of "any" maybe turn off
        "@typescript-eslint/no-explicit-any": [
            "error",
            {
                "fixToUnknown": true
            }
        ],
        // related to common usages of "any" maybe turn off
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extraneous-class": "off",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-inferrable-types": [
            "error",
            {
                "ignoreParameters": true,
                "ignoreProperties": true
            }
        ],
        "@typescript-eslint/no-invalid-void-type": "off",
        "@typescript-eslint/no-meaningless-void-operator": "error",
        "@typescript-eslint/no-misused-new": "error",
        // namespace & module keywords related rule
        "@typescript-eslint/no-namespace": "error",
        // namespace & module keywords related rule
        "@typescript-eslint/prefer-namespace-keyword": "off",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        // TS3.7 or greater operator is not supported
        "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        // TS3.7 or greater operator is not supported
        "@typescript-eslint/non-nullable-type-assertion-style": "off",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/parameter-properties": "off",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        // esm/commonjs
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-type-alias": [
            "error",
            {
                "allowLiterals": "never",
                "allowCallbacks": "always",
                "allowTupleTypes": "always",
                "allowAliases": "always",
                "allowConditionalTypes": "always",
                "allowConstructors": "always",
                "allowMappedTypes": "always",
                "allowGenerics": "always"
            }
        ],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        // might cause issues with eslint tree (not )
        "@typescript-eslint/no-unnecessary-condition": "off",
        "@typescript-eslint/no-unnecessary-qualifier": "off",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "off",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        // safe-guards
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-useless-empty-export": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-enum-initializers": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        // regex
        "@typescript-eslint/prefer-regexp-exec": "error",
        // class and method chaining
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        // ts compiler
        "@typescript-eslint/prefer-ts-expect-error": "error",
        // promises
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/require-array-sort-compare": [
            "error",
            {
                "ignoreStringArrays": true
            }
        ],
        "@typescript-eslint/restrict-plus-operands": "error"
    }
}